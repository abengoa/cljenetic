(ns cljenetic.exampletsp
	(use cljenetic.core clojure.math.numeric-tower))
	
;(def cities (reduce into {} (for [i (range 100)] {(str "c-" i) [(rand 100.0) (rand 100.0)]})))
;(def cities {1 [37 52] 2 [49 49] 3 [52 64] 4 [20 26] 5 [40 30] 6 [21 47] 7 [17 63] 8 [31 62] 9 [52 33] 10 [51 21] 11 [42 41] 12 [31 32] 13 [5 25] 14 [12 42] 15 [36 16] 16 [52 41] 17 [27 23]
;18 [17 33] 19 [13 13] 20 [57 58] 21 [62 42] 22 [42 57] 23 [16 57] 24 [8 52] 25 [7 38] 26 [27 68] 27 [30 48] 28 [43 67] 29 [58 48] 30 [58 27] 31 [37 69] 32 [38 46] 33 [46 10] 34 [61 33] 35 [62 63]
;36 [63 69] 37 [32 22] 38 [45 35] 39 [59 15] 40 [5 6] 41 [10 17] 42 [21 10] 43 [5 64] 44 [30 15] 45 [39 10] 46 [32 39] 47 [25 32] 48 [25 55] 49 [48 28] 50 [56 37] 51 [30 40]})

;(def cities {1 [22 22] 2 [36 26] 3 [21 45] 4 [45 35] 5 [55 20] 6 [33 34] 7 [50 50] 8 [55 45] 9 [26 59] 10[ 40 66] 11[ 55 65] 12[ 35 51] 13[ 62 35] 14[ 62 57] 15[ 62 24] 16[ 21 36] 17[ 33 44] 18[ 9 56] 19[ 62 48] 20[ 66 14] 21[ 44 13] 22[ 26 13] 23[ 11 28] 24[ 7 43] 25[ 17 64] 26[ 41 46] 27[ 55 34] 28[ 35 16] 29[ 52 26] 30[ 43 26] 31[ 31 76] 32[ 22 53] 33[ 26 29] 34[ 50 40] 35[ 55 50] 36[ 54 10] 37[ 60 15] 38[ 47 66] 39[ 30 60] 40[ 30 50] 41[ 12 17] 42[ 15 14] 43[ 16 19] 44[ 21 48] 45[ 50 30] 46[ 51 42] 47[ 50 15] 48[ 48 21] 49[ 12 38] 50[ 15 56] 51[ 29 39] 52[ 54 38] 53[ 55 57] 54[ 67 41] 55[ 10 70] 56[ 6 25] 57[ 65 27] 58[ 40 60] 59[ 70 64] 60[ 64 4] 61[ 36 6] 62[ 30 20] 63[ 20 30] 64[ 15 5] 65[ 50 70] 66[ 57 72] 67[ 45 42] 68[ 38 33] 69[ 50 4] 70[ 66 8] 71[ 59 5] 72[ 35 60] 73[ 27 24] 74[ 40 20] 75[ 40 37] 76[ 40 40]})



(def cities {1 [1380 939] 2 [2848 96] 3 [3510 1671] 4 [457 334] 5 [3888 666] 6 [984 965] 7 [2721 1482] 8 [1286 525] 9 [2716 1432] 10 [738 1325] 11 [1251 1832] 12 [2728 1698] 13 [3815 169]
14 [3683 1533] 15 [1247 1945] 16 [123 862] 17 [1234 1946] 18 [252 1240] 19 [611 673] 20 [2576 1676] 21 [928 1700] 22 [53 857] 23 [1807 1711] 24 [274 1420] 25 [2574 946] 26 [178 24] 27 [2678 1825] 28 [1795 962] 29 [3384 1498] 30 [3520 1079] 31 [1256 61] 32 [1424 1728] 33 [3913 192] 34 [3085 1528] 35 [2573 1969] 36 [463 1670] 37 [3875 598] 38 [298 1513] 39 [3479 821] 40 [2542 236] 41 [3955 1743] 42 [1323 280] 43 [3447 1830] 44 [2936 337] 45 [1621 1830] 46 [3373 1646] 47 [1393 1368] 48 [3874 1318] 49 [938 955] 50 [3022 474] 51 [2482 1183] 52 [3854 923] 53 [376 825] 54 [2519 135] 55 [2945 1622] 56 [953 268] 57 [2628 1479] 58 [2097 981] 59 [890 1846] 60 [2139 1806] 61 [2421 1007] 62 [2290 1810] 63 [1115 1052] 64 [2588 302] 65 [327 265] 66 [241 341] 67 [1917 687] 68 [2991 792] 69 [2573 599] 70 [19 674] 71 [3911 1673] 72 [872 1559] 73 [2863 558] 74 [929 1766] 75 [839 620] 76 [3893 102] 77 [2178 1619] 78 [3822 899] 79 [378 1048] 80 [1178 100] 81 [2599 901] 82 [3416 143] 83 [2961 1605] 84 [611 1384] 85 [3113 885] 86 [2597 1830] 87 [2586 1286] 88 [161 906] 89 [1429 134] 90 [742 1025] 91 [1625 1651] 92 [1187 706] 93 [1787 1009] 94 [22 987] 95 [3640 43] 96 [3756 882] 97 [776 392] 98 [1724 1642] 99 [198 1810] 100 [3950 1558]})

(defn distance [[c1x c1y] [c2x c2y]] (sqrt (+ (expt (- c1x c2x) 2) (expt (- c1y c2y) 2))))
(defn path-generator [cities] (shuffle (keys cities)))
(defn swap [s i1 i2] (let [[s1 s2] (sort [i1 i2])
							e1 (nth s s1)
							e2 (nth s s2)]
							(concat (take s1 s) [e2] (take (- (dec s2) s1) (drop (inc s1) s)) [e1] (drop (inc s2) s))))
;(defn path-mutator [p] (swap p (rand-int (count p)) (rand-int (count p))))
(defn path-mutator [p] (let [n (rand-int (count p))] (concat (drop n p) (take n p))))
(defn path-crossover [cities i1 i2] (let [[n1 n2] (single-point-crossover i1 i2)] (vec (map #(distinct (concat % (shuffle (keys cities)))) [n1 n2]))))
(defn path-distance [cities p] (reduce + (map #(distance (cities %1) (cities %2)) p (concat (rest p) [(first p)]))))
(defn path-fitness [cities p] (/ 1.0 (+ 1 (/ (- (path-distance cities p) 530) 100.0))))
(def tsp-ga (genetic-algorithm 
				(partial path-generator cities)
				50
				path-mutator
				0.2
				roulette-wheel-selector 
				25
				(partial path-crossover cities)
				(partial path-fitness cities) true))
;(def tsp (evolve-solution tsp-ga 3000 false?))
;(path-distance cities (first (best-fit tsp)))

;(map println (map first (partition 1 100 (map-indexed (fn [i v] [i v]) (map (partial path-distance cities) (map first (:best tsp)))))))


;(map println (map (fn [[i x]] [i (path-distance cities x)]) (map first (partition 1 100 (map-indexed (fn [i [p f]] [i p]) (:best tsp)))))))

;(def tsp (evolve-solution-with-state tsp-ga 15000 false? "C:/tmp/genetic/100citiesb.txt" 1000))
;(def new-tsp (retrieve-algorithm-state tsp "C:/tmp/genetic/100cities.txt"))